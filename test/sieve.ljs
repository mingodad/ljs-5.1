// the sieve of of Eratosthenes programmed with coroutines
// typical usage: lua -e N=1000 sieve.lua | column

// generate all the numbers from 2 to n
function gen (n) {
  return coroutine.wrap(function () {
    for( i=2,n ) { coroutine.yield(i); }
  });
}

// filter the numbers generated by `g', removing multiples of `p'
function filter (p, g) {
  return coroutine.wrap(function () {
    while( 1 ) {
      var n = g();
      if( n == null ) { return; }
      if( math.mod(n, p) != 0 ) { coroutine.yield(n); }
    }
  });
}

N=N || 1000;		// from command line
x = gen(N);		// generate primes up to N
while( 1 ) {
  var n = x();		// pick a number until done
  if( n == null ) { break; }
  print(n);		// must be a prime number
  x = filter(n, x);	// now remove its multiples
}
